EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab4.exe_ -- emu8086 assembler version: 4.08  
 
[ 2018/11/26  --  10:31:40 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;name:
[   2]        :                                       ;author: mbinary
[   3]        :                                       ;time: 2018-11
[   4]        :                                       ;function: 编程计算任一整数加减运算表达式，
[   5]        :                                       ; 表达式长度不超过1024个字节，从键盘输入，可带括号，操作数为字数据
[   6]        :                                       ; 计算结果的范围 -1<<15 --- 1<<15-1
[   7]        :                                       
[   8]        :                                       include 'emu8086.inc'
[   9]        :                                       ;include 'mymacro.inc'
[  10]        :                                       .model small
[  11]        :                                       .data
[  12]        :                                       
[  13]    0000: 00 00 00 00 00 00 00 00 00 00 00 00   stk db 1024 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  14]        :                                       
[  15]        :                                       .code
[  16]    0400: BA 00 00 8E DA                        .startup
[  17]    0405: BE 00 00                              lea si,stk
[  18]    0408: E8 EA 00                              call readExpr
[  19]    040B: 4E                                    dec si
[  20]    040C: E8 BA 00                              call calStk
[  21]    040F: 50 56 EB 03 0D 0A 00 BE 13 00 2E 8A   printn ''
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  22]    0429: 50 56 EB 09 72 65 73 75 6C 74 3A 20   print "result: "
                00 BE 2D 00 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[  23]    0449: E8 05 00                              call print_num
[  24]    044C: E9 87 02                              jmp quit
[  25]        :                                       
[  26]    044F: EB 26 52 50 3D 00 00 75 0A 50 B0 30   define_print_num
                B4 0E CD 10 58 EB 12 3D 00 00 79 0A 
                F7 D8 50 B0 2D B4 0E CD 10 58 E8 05 
                00 58 5A C3                         
[  27]    0477: EB 50 50 53 51 52 B9 01 00 BB 10 27   DEFINE_PRINT_NUM_UNS  ; unsigned
                3D 00 00 74 32 83 FB 00 74 35 83 F9 
                00 74 04 3B C3 72 14 B9 00 00 BA 00 
                00 F7 F3 04 30 50 8A C0 B4 0E CD 10 
                58 8B C2 50 BA 00 00 8B C3 2E F7 36 
                C7 00 8B D8 58 EB CE 50 B0 30 B4 0E 
                CD 10 58 5A 59 5B 58 C3 0A 00       
[  28]    04C9:                                       calStk proc
[  29]        :                                       ; si: end(include) of stk
[  30]        :                                       ; return ax
[  31]    04C9: 53                                    push bx
[  32]    04CA: 51                                    push cx
[  33]    04CB: 80 3C 2D                              cmp [si],'-'
[  34]    04CE: 74 0C                                 je eval
[  35]    04D0: 80 3C 2B                              cmp [si],'+'
[  36]    04D3: 74 07                                 je eval
[  37]    04D5: 32 E4                                 xor ah,ah
[  38]    04D7: 8A 04                                 mov al,[si]
[  39]    04D9: 4E                                    dec si
[  40]    04DA: EB 16                                 jmp calquit
[  41]    04DC:                                       eval:
[  42]    04DC: 8A 0C                                 mov cl,[si]    ; op
[  43]    04DE: 4E                                    dec si
[  44]    04DF: E8 E7 FF                              call calStk  ; second opr
[  45]    04E2: 8B D8                                 mov bx,ax    ; second opr in bx
[  46]    04E4: E8 E2 FF                              call calStk  ; first opr in ax
[  47]    04E7: 80 F9 2B                              cmp cl,'+'
[  48]    04EA: 74 04                                 je plus
[  49]    04EC: 2B C3                                 sub ax,bx
[  50]    04EE: EB 02                                 jmp calquit
[  51]    04F0:                                       plus:
[  52]    04F0: 03 C3                                 add ax,bx
[  53]    04F2:                                       calquit:
[  54]    04F2: 59                                    pop cx
[  55]    04F3: 5B                                    pop bx
[  56]    04F4: C3                                    ret
[  57]        :                                       calStk endp
[  58]        :                                       
[  59]        :                                       
[  60]        :                                       
[  61]    04F5:                                       readExpr proc
[  62]        :                                       ; si: offset stk
[  63]    04F5: 53                                    push bx
[  64]    04F6: 52                                    push dx
[  65]    04F7: 33 DB                                 xor bx,bx
[  66]    04F9: 33 D2                                 xor dx,dx
[  67]    04FB:                                       read:
[  68]    04FB: E8 D3 01                              call getChar
[  69]    04FE:                                       compare:
[  70]    04FE: 3C 0D                                 cmp al,13
[  71]    0500: 75 03 E9 BB 01                        je check
[  72]    0505: 3C 29                                 cmp al,')'
[  73]    0507: 75 03 E9 B4 01                        je check
[  74]    050C: 3C 28                                 cmp al,'('
[  75]    050E: 74 45                                 je newExpr
[  76]    0510: 3C 2B                                 cmp al,'+'
[  77]    0512: 74 2B                                 je opr
[  78]    0514: 3C 2D                                 cmp al,'-'
[  79]    0516: 74 27                                 je opr
[  80]    0518: 3C 30                                 cmp al,'0'
[  81]    051A: 7D 03 E9 4D 01                        jl unknown
[  82]    051F: 3C 39                                 cmp al,'9'
[  83]    0521: 7E 03 E9 46 01                        jg unknown
[  84]    0526: 2C 30                                 sub al,'0'
[  85]    0528: EB 00                                 jmp readNum
[  86]        :                                       
[  87]    052A:                                       readNum:  ; read num and store it in bl
[  88]    052A: 8A C8                                 mov cl,al
[  89]    052C: 8A C3                                 mov al,bl
[  90]    052E: 32 E4                                 xor ah,ah
[  91]    0530: B5 0A                                 mov ch,10
[  92]    0532: F6 E5                                 mul ch
[  93]    0534: 8A D8                                 mov bl,al
[  94]    0536: 02 D9                                 add bl,cl
[  95]    0538: B2 01                                 mov dl,1
[  96]    053A: E8 94 01                              call getChar
[  97]    053D: EB BF                                 jmp compare
[  98]        :                                       
[  99]    053F:                                       opr:     ; latest operator sotred in  bh
[ 100]    053F: 84 D2                                 test dl,dl
[ 101]    0541: 74 07                                 jz  noNum
[ 102]    0543: 32 D2                                 xor dl,dl
[ 103]    0545: 88 1C                                 mov [si],bl
[ 104]    0547: 46                                    inc si
[ 105]    0548: 32 DB                                 xor bl,bl
[ 106]    054A:                                       noNum:
[ 107]    054A: 84 FF                                 test bh,bh
[ 108]    054C: 74 03                                 jz noOpr
[ 109]    054E: 88 3C                                 mov [si],bh
[ 110]    0550: 46                                    inc si
[ 111]    0551:                                       noOpr:
[ 112]    0551: 8A F8                                 mov bh,al
[ 113]    0553: EB A6                                 jmp read
[ 114]        :                                       
[ 115]    0555:                                       newExpr:
[ 116]    0555: E8 9D FF                              call readExpr
[ 117]    0558: 3C 29                                 cmp al,')'
[ 118]    055A: 75 6A                                 jne symErr
[ 119]    055C: 84 FF                                 test bh,bh
[ 120]    055E: 74 9B                                 jz read
[ 121]    0560: 88 3C                                 mov [si],bh
[ 122]    0562: 46                                    inc si
[ 123]    0563: 33 DB                                 xor bx,bx
[ 124]    0565: EB 94                                 jmp read
[ 125]        :                                       
[ 126]    0567:                                       numErr:
[ 127]    0567: 50 56 EB 03 0D 0A 00 BE 6B 01 2E 8A   printn ''
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 128]    0581: 50 56 EB 23 5B 65 72 72 6F 72 5D 3A   print  "[error]: no operand for operator: "
                20 6E 6F 20 6F 70 65 72 61 6E 64 20 
                66 6F 72 20 6F 70 65 72 61 74 6F 72 
                3A 20 00 BE 85 01 2E 8A 04 3C 00 74 
                07 46 B4 0E CD 10 EB F2 5E 58       
[ 129]    05BB: 50 8A C0 B4 0E CD 10 58               putc  al
[ 130]    05C3: E9 10 01                              jmp quit
[ 131]    05C6:                                       symErr:
[ 132]    05C6: 50 56 EB 03 0D 0A 00 BE CA 01 2E 8A   printn ''
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 133]    05E0: 50 56 EB 1E 5B 65 72 72 6F 72 5D 3A   print "[error]: unmatched parenthese"
                20 75 6E 6D 61 74 63 68 65 64 20 70 
                61 72 65 6E 74 68 65 73 65 00 BE E4 
                01 2E 8A 04 3C 00 74 07 46 B4 0E CD 
                10 EB F2 5E 58                      
[ 134]    0615: E9 BE 00                              jmp quit
[ 135]    0618:                                       oprErr:
[ 136]    0618: 50 56 EB 03 0D 0A 00 BE 1C 02 2E 8A   printn ''
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 137]    0632: 50 56 EB 19 5B 65 72 72 6F 72 5D 3A   print "[error]: wrong operator:"
                20 77 72 6F 6E 67 20 6F 70 65 72 61 
                74 6F 72 3A 00 BE 36 02 2E 8A 04 3C 
                00 74 07 46 B4 0E CD 10 EB F2 5E 58 
                                                    
[ 138]    0662: 50 8A C3 B4 0E CD 10 58               putc  bl
[ 139]    066A: EB 6A                                 jmp quit
[ 140]    066C:                                       unknown:
[ 141]    066C: 50 56 EB 03 0D 0A 00 BE 70 02 2E 8A   printn ''
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 142]    0686: 50 56 EB 19 5B 65 72 72 6F 72 5D 3A   print "[error]: unknown input: "
                20 75 6E 6B 6E 6F 77 6E 20 69 6E 70 
                75 74 3A 20 00 BE 8A 02 2E 8A 04 3C 
                00 74 07 46 B4 0E CD 10 EB F2 5E 58 
                                                    
[ 143]    06B6: 50 8A C0 B4 0E CD 10 58               putc al
[ 144]    06BE: EB 16                                 jmp quit
[ 145]        :                                       
[ 146]    06C0:                                       check:
[ 147]    06C0: 84 D2                                 test dl,dl
[ 148]    06C2: 74 0A                                 jz  finish
[ 149]    06C4: 88 1C                                 mov [si],bl
[ 150]    06C6: 46                                    inc si
[ 151]    06C7: 84 FF                                 test bh,bh
[ 152]    06C9: 74 03                                 jz finish
[ 153]    06CB: 88 3C                                 mov [si],bh
[ 154]    06CD: 46                                    inc si
[ 155]    06CE:                                       finish:
[ 156]    06CE: 5A                                    pop dx
[ 157]    06CF: 5B                                    pop bx
[ 158]    06D0: C3                                    ret
[ 159]        :                                       readExpr endp
[ 160]        :                                       
[ 161]    06D1:                                       getChar proc
[ 162]    06D1: B4 01                                 mov ah,1
[ 163]    06D3: CD 21                                 int 21h
[ 164]    06D5: C3                                    ret
[ 165]        :                                       endp
[ 166]        :                                       
[ 167]    06D6:                                       quit:
[ 168]    06D6: B8 00 4C CD 21                        .exit
[ 169]        :                                       end
[ 170]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: DB      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 05      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 37      -   check sum (l.byte)
0013: A0      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 40      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 40      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
