    digraph edge_settings { 
        label = "int *(*b[10])[10]";
        node [color = black];
        //edge
        subgraph cluster0{
        declaration->"declaration specifiers";
        declaration->"init_declarator_list";
        declaration->";";
        
        
        
        "declaration specifiers" ->type_specifier;
        type_specifier ->INT;
        
        init_declarator_list->init_declarator;
        init_declarator->declarator;
        
        
        declarator -> pointer;
        declarator -> direct_declarator;
        
        pointer ->"*";
        
        direct_declarator -> "direct_declarator ";
        direct_declarator -> "["
        direct_declarator -> "constant_expression"
        direct_declarator -> "]";
        
        "direct_declarator "->"(";
        "direct_declarator "->"declarator ";
        "direct_declarator "->")";
        
        "declarator " -> "pointer ";
        "pointer "->"* ";
        
        "declarator "-> "direct_declarator  ";
        "direct_declarator  " -> "direct_declarator   ";
        "direct_declarator  " -> "[ ";
        "direct_declarator  " -> "constant_expression ";
        "direct_declarator  " -> "] ";
        
        "direct_declarator   " -> IDENTIFIER;
        IDENTIFIER -> b;
        
        
        
        "constant_expression "->constant_10[style=dashed,color=red];        
        constant_expression ->"constant_10 "[style=dashed,color=red];
        constant_10[color=red,style=bold,shape=record]
        "constant_10 "[color=red,style=bold,shape=record]
        }
        
        
        subgraph cluster_constant_10{
            label = "constant_10";
            "constant_expression  " -> conditional_expression;
            conditional_expression ->logical_or_expression;
            logical_or_expression -> logical_and_expression;
            logical_and_expression -> inclusive_or_expression;
            inclusive_or_expression -> exclusive_or_expression;
            exclusive_or_expression -> equality_expression;
            equality_expression -> relational_expression;
            relational_expression -> shift_expression;
            shift_expression ->additive_expression;
            additive_expression ->multiplicative_expression;
            multiplicative_expression -> cast_expression;
            cast_expression-> unary_expression;
            unary_expression -> postfix_expression;
            postfix_expression -> primary_expression;
            primary_expression -> "CONSTANT 10";
        }
    } 
